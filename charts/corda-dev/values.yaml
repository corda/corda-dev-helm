# values for configuring bitnami/kafka sub-chart.
kafka:
  # -- enable/disable kafka.
  enabled: true
  # Configuring Kafka image
  image:
    tag: 3.6.1-debian-11-r0
  # -- Extra env vars to pass to the kafka containers.
  extraEnvVars:
    - name: ALLOW_PLAINTEXT_LISTENER
      value: "yes"
  # -- set a static replica count of kafka brokers.
  replicaCount: 1
  # -- enable/disable auto-creation of topics.
  autoCreateTopicsEnable: false
  # authentication configuration.
  auth:
    # -- protocol of the client listener.
    clientProtocol: sasl_tls
    # SASL configuration.
    sasl:
      # -- sasl mechanism e.g. scram-sha-256
      mechanism: "scram-sha-256"
      # JAAS configuration for SASL authentication.
      jaas:
        # -- client users to authenticate with Kafka.
        clientUsers:
          - "user"
        # -- client passwords to authenticate with Kafka; generated if not specified.
        clientPasswords:
    # -- protocol of the inter broker listener used for replication.
    interBrokerProtocol: tls
    # tls configuration.
    tls:
      # -- type of the tls certificates.
      type: pem
      # -- autogenerate a CA, and signed certificates for each broker.
      autoGenerated: true
  # -- the authorizer to use for access control
  authorizerClassName: "kafka.security.authorizer.AclAuthorizer"
  # values for container security context
  containerSecurityContext:
    # -- enable container security context
    enabled: true
  # values configuring bitnami/zookeeper dependency of bitnami/kafka.
  kraft:
    enabled: true
    # -- set a static replica count of zookeeper nodes.
    replicaCount: 1

# values for configuring bitnami/postgres sub-chart.
postgresql:
  # -- enable/disable postgres.
  enabled: true
  # Configuring PostgreSQL image
  image:
    tag: 16.1.0-debian-11-r19
  # values configuring the permissions of volumes.
  volumePermissions:
    # -- enable/disable an init container which changes ownership of the mounted volumes.
    enabled: true
  # Configuring TLS
  tls:
    # -- enable TLS for postgres. 
    enabled: true
    # -- enable automatic certificate generation for postgres.
    autoGenerated: true
  # auth configuration.
  auth:
    # -- name of database to be created.
    database: cordacluster
    # -- name of the user to be created.
    username: user
    # -- name of the password of the user to be created - defaults to generated value
    password:
  # primary (read/write instance) configuration.
  primary:
    # Custom init configuration..
    initdb:
      # -- ConfigMap-like object containing scripts to be executed on startup.
      # @default -- corda_user_init.sh
      scripts:
        corda_user_init.sh: |
          export PGPASSFILE=/tmp/pgpasswd$$
          touch $PGPASSFILE
          chmod 600 $PGPASSFILE
          trap "rm $PGPASSFILE" EXIT
          echo "localhost:${POSTGRES_PORT_NUMBER:-5432}:$POSTGRESQL_DATABASE:postgres:$POSTGRES_POSTGRES_PASSWORD" > $PGPASSFILE
          psql -v ON_ERROR_STOP=1 cordacluster <<-EOF
            ALTER ROLE "$POSTGRES_USER" NOSUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;
          EOF
