# values for configuring bitnami/kafka sub-chart.
kafka:
  # -- enable/disable kafka.
  enabled: true
  # Configuring Kafka image.
  image:
    tag: 3.6.1-debian-11-r0
  # -- Extra config to append to the Kafka server.properties.
  extraConfig: |-
    authorizer.class.name=org.apache.kafka.metadata.authorizer.StandardAuthorizer
    auto.create.topics.enable=false
    allow.everyone.if.no.acl.found=true
    super.users=User:controller_user
  # listeners configuration.
  listeners:
    # client configuration.
    client:
      # -- client protocol.
      protocol: SASL_SSL
      # -- client ssl authentication e.g. required.
      sslClientAuth: none
  # sasl configuration.
  sasl:
    # client configuration.
    client:
      # -- client users to authenticate with Kafka.
      users:
        - "bootstrap"
        - "crypto"
        - "db"
        - "flow"
        - "flowMapper"
        - "verification"
        - "membership"
        - "p2pGateway"
        - "p2pLinkManager"
        - "persistence"
        - "tokenSelection"
        - "rest"
        - "uniqueness" 
      # -- client passwords to authenticate with Kafka; generated if not specified.
      passwords:
  # tls configuration.
  tls:
    # -- type of the tls certificates.
    type: PEM
    # -- autogenerate a CA, and signed certificates for each broker.
    autoGenerated: true
  resources:
    requests:
      memory: 4000Mi
    limits:
      # Kafka gets OOM killed with 500Mi, so and double that which seems to work
      # https://www.confluent.io/wp-content/uploads/apache-kafka-confluent-enterprise-ref-architecture.pdf page 11 says 4GB
      memory: 4000Mi

# values for configuring bitnami/postgres sub-chart.
postgresql:
  # -- enable/disable postgres.
  enabled: true
  # Configuring PostgreSQL image.
  image:
    tag: 14.10.0-debian-11-r23
  # values configuring the permissions of volumes.
  volumePermissions:
    # -- enable/disable an init container which changes ownership of the mounted volumes.
    enabled: true
  # Configuring TLS.
  tls:
    # -- enable TLS for postgres. 
    enabled: true
    # -- enable automatic certificate generation for postgres.
    autoGenerated: true
  # auth configuration.
  auth:
    # -- name of database to be created.
    database: cordacluster
    # -- name of the user to be created.
    username: user
    # -- name of the password of the user to be created - defaults to generated value.
    password:
  # primary (read/write instance) configuration.
  primary:
    # Custom init configuration..
    initdb:
      # -- ConfigMap-like object containing scripts to be executed on startup.
      # @default -- corda_user_init.sh
      scripts:
        corda_user_init.sh: |
          export PGPASSFILE=/tmp/pgpasswd$$
          touch $PGPASSFILE
          chmod 600 $PGPASSFILE
          trap "rm $PGPASSFILE" EXIT
          echo "localhost:${POSTGRES_PORT_NUMBER:-5432}:$POSTGRESQL_DATABASE:postgres:$POSTGRES_POSTGRES_PASSWORD" > $PGPASSFILE
          psql -v ON_ERROR_STOP=1 cordacluster <<-EOF
            ALTER ROLE "$POSTGRES_USER" NOSUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;
          EOF
  # -- Resource requests/limits for PostgreSQL
  resources:
    requests:
      memory: 256Mi
    limits:
      memory: 256Mi